from django.shortcuts import render
from django.http import HttpResponse
from django.views import View
from django.views.generic import TemplateView
from django.http import HttpResponseRedirect
from django.urls import reverse


# Create your views here.
def home(request):
  return HttpResponse("<h1>Hello Django!</h1>")
  
def about(request):
  return HttpResponse("<h1>About Page</h1>")

def coding(request):
  return HttpResponse("<h1>Coding</h1>")

def function_view(request):
    context = {
        'page_title': 'Function-Based View',
        'page_heading': 'Welcome to the Function-Based View',
        'page_content': 'This is the content generated by the function-based view.',
    }
    return render(request, 'bootswatch.html', context)

#class from which all class based views inherit
class BaseView(TemplateView):
    default_title = 'My Website'

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context.setdefault('title', self.default_title)
        return context

class ClassView(BaseView):
  template_name = 'bootswatch.html'

  def get_context_data(self, **kwargs):
      context = super().get_context_data(**kwargs)
      context.update({
          'title': 'Class-Based View',
          'page_heading': 'Welcome to the Class-Based View',
          'page_content': 'This is the content generated by the class-based view.',
      })
      return context


def About_Page_view(request):
          context = {
            'page_title': 'About-View',
            'page_heading': 'Web page about Django home page developing',
            'page_content': 'This is About Flask-Django Web page. Django is a high-level web framework that comes with many built-in features.',
}
          return render(request, 'bootswatch.html', context)  

class AboutView(View):
  def get(self, request):
      context = {
        'page_title': 'About-View',
        'page_heading': 'Welcome to Django vs Flask Home page',
        'page_content': 'This is About Flask-Django Web page. Django is a high-level web framework that comes with many built-in features.',
                     
      }
      return render(request, 'bootswatch.html', context)

def Home_view(request):
  context = {
    'page_title': 'Home-Based View',
    'page_heading': 'Welcome to learn - Python Programming Class',
    'page_content': 'Both Django and Flask use the concept of URL patterns or routes to map incoming HTTP requests to specific functions or views',
  }
  return render(request, 'bootswatch.html', context)

class Home_View(View):
  def get(self, request):
      context = {
          'page_title': 'Home-Based View',
          'page_heading': 'Welcome to Django vs Flask Home page',
          'page_content': 'Both Django and Flask use the concept of URL patterns or routes to map incoming HTTP requests to specific functions or views',

      }
      return render(request, 'bootswatch.html', context)


def Coding_view(request):
  context = {
    'page_title': 'Coding-View',
    'page_heading': 'Welcome to learn - Python Coding',
    'page_content': 'This is About Flask-Django Web page. Django is a high-level web framework that comes with many built-in features.',
}
  return render(request, 'bootswatch.html', context)    

class CodingtView(View):
  def get(self, request):
    context = {
'page_title': 'Coding-View',
'page_heading': 'Welcome to learn - Python Coding',
'page_content': 'This is About Flask-Django Web page. Django is a high-level web framework that comes with many built-in features.',

}
    return render(request, 'bootswatch.html', context)

class ThemeView(BaseView):
  template_name = 'theme.html'

  def get_context_data(self, **kwargs):
      context = super().get_context_data(**kwargs)
      # Add additional context data if needed
      return context

  def post(self, request, *args, **kwargs):
      theme = request.POST.get('theme')
      response = HttpResponseRedirect(reverse('theme'))
      response.set_cookie('theme', theme)
      return response



